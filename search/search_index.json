{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Own Runbooks","text":"<p>Use this to capture some useful notes during my day-to-day work.</p> <p>It's created with mkdocs.org, visit the website to see more details of it.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"devops/authNZ/auth-integration/","title":"AuthN/Z integration","text":""},{"location":"devops/authNZ/auth-integration/#okta-integration","title":"Okta integration","text":"<ul> <li>okta cli</li> </ul>"},{"location":"devops/authNZ/auth-integration/#install-okta-cli-on-macos","title":"Install okta cli on MacOS","text":"<pre><code>brew install --cask oktadeveloper/tap/okta\n</code></pre> <p>Setup a okta developer account(if not having one)</p> <pre><code>okta register\nokta login\nokta apps create\n</code></pre> <p>Once the okta app is created, the issuer, client ID, and client secret will be stored in an <code>.okta.env</code> file in your current directory.</p>"},{"location":"devops/secrets/generate_random_secrets/","title":"Generate random secrets","text":"<p>Use this handy website: Random key generator</p>"},{"location":"devops/ssl/generate_ssl_key_pairs/","title":"Generate SSL Key pairs for Https","text":""},{"location":"devops/ssl/generate_ssl_key_pairs/#steps-to-generate-the-key-pairs","title":"Steps to generate the key pairs","text":"<pre><code>openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 366\n</code></pre> <p>After running the command above, it generates two files:</p> <ul> <li>cert.pem</li> <li>cert.pem</li> </ul> <p>These files will be used for your app as a self-signed key pairs.</p> <p>For example, a python FASTAPI service can use the self-signed certs as following(assuming the path is correct):</p> <pre><code>if __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True, port=8000, host=\"0.0.0.0\", ssl_keyfile=\"./certs/key.pem\",\n                ssl_certfile=\"./certs/cert.pem\")\n</code></pre>"},{"location":"frontend/react/react/","title":"ReactJS","text":""},{"location":"frontend/react/react/#useful-resources","title":"Useful resources","text":"<ul> <li>reactjs interview questions</li> </ul>"},{"location":"macos/macos/","title":"MacOS","text":""},{"location":"macos/macos/#window-management","title":"Window management","text":"<ul> <li>divvy</li> <li>rectangle</li> </ul> <p>Divvy is the one I have been using for years. It's good enough, not sure if it's worth to try something different. Heard some good words about <code>rectangle</code>, and also swish, which is a paid software.</p>"}]}